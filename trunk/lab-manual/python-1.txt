=== Python Lab I

==== Objective

Get started with Python and learn the basic types and control flow
statements.

==== Starting Python

Start Python in interactive mode by invoking `python` in the command
line.

--------
$ python
Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
--------

==== Arithmetic expressions

Convert temperature specified in celsius to farenheit, using Python's
interactive prompt.

-------
>>> celsius = 100
>>> farenheit = (9 * celsius / 5) + 32
>>> print farenheit
212
-------

==== Lists and slicing

The wind speed data (in km/hr) from a weather station, for a single
day, obtained every 2 hours, starting from 12:00am: 3, 5, 3, 2, 0, 0,
5, 5, 11, 5, 10, 2.

 1. Represent the data using a list.
 2. Extract the wind speed at noon.
 3. Extract all the wind speeds in the afternoon.
 4. Extract the last measurement of the day.

------
>>> wind_speed = [3, 5, 3, 2, 0, 0, 5, 5, 11, 5, 10, 2]
>>> noon = wind_speed[6]
>>> print noon
5
>>> afternoon = wind_speed[7:12]
>>> print afternoon
[5, 11, 5, 10, 2]
>>> last = wind_speed[-1]
>>> print last
2
------

==== List iteration

Calculate the average wind speed of the day using the data specified
in Task 3.

------
>>> wind_speed = [3, 5, 3, 2, 0, 0, 5, 5, 11, 5, 10, 0]
>>> sum = 0
>>> for item in wind_speed:
...	sum = sum + item <1>
... <2>
>>> avg = sum / len(wind_speed)
>>> print avg
4
------

<1> The line should be preceded by a single TAB.
<2> The loop body is terminated by a blank line.

==== Emulate C's `for` statement

Print the first 10 numbers in the Fibonacci series. Use the `range()`
function to emulate C's for statement: `for (i = 0; i < 10; i++)`.

------
>>> range(4)
[0, 1, 2, 3]
>>> a, b = 0, 1
>>> for i in range(10):
...	print b,
...	a, b = b, a+b
...
1 1 2 3 5 8 13 21 34 55
------

==== Strings and slicing

Perform the following operations, on the word "newsworthy":

  1. Extract the second letter.
  2. Extract the first four letters.
  3. Extract the last six letters.

------
>>> word = "newsworthy"
>>> print len(word)
10
>>> print word[1]
e
>>> print word[0:4]
news
>>> print word[4:10]
worthy
------

==== String iteration and concatenation

Reverse the word "linux" using string iteration and concatenation.

------
>>> word = "linux"
>>> reversed = ""
>>> for ch in word:
... 	reversed = reversed + ch
...
>>> print reversed
xunil
------

==== String multiplication

Print a 5 step right-angled triangle using string multiplication.

------
>>> max = 5
>>> for i in range(0, max):
...    print "*" * i
...
*   
**
***
****
*****
------

==== Writing Python scripts

Write a python script to print "Hello World".

  1. Create a file with the following statement.
+
------
print "Hello World"
------
+
  2. Save the script as `hello.py`. Invoke the python interpreter with
     `hello.py` as argument.
+
------
$ python hello.py
Hello World
------

==== Using the hashbang sequence

Write a Python script that prints "Hello World", and uses the Hashbang
sequence, to specify the interpreter. 

  1. Create a file with the following contents
+
------
#!/usr/bin/python

print "Hello World"
------
+
  2. Save the script as `hello2.py`, set the execute permission using
     `chmod` and execute the script.
+
-----
$ chmod +x hello2.py
$ ./hello2.py
Hello World
------

==== `if` statement

Write a Python script to find the largest of three numbers.

------
a = 10
b = 12
c = 15
if a > b:
    if a > c:
         print a
    else:
         print c
else:
    if b > c:
         print b
    else:
         print c
------

==== `break` statement and `else` clause

Write a Python script that prints prime numbers less than 20.

------
for n in range(2, 10):
    for x in range(2, n):
        if n % x == 0:
            print n, 'equals', x, '*', n/x
            break
    else:
        # loop fell through without finding a factor
        print n, 'is a prime number'
------

==== `while` loop

Write a Python script to find the first factorial that has more than
100 digits.

------
n = 1
fact = 1
while fact < (10 ** 100):
    n = n + 1
    fact = fact * n
------

==== Defining functions

Write a function that accepts a text and a character as argument and
returns the no. of occurrences of the character in the text.

------
def count(text, ch):
    n = 0
    for t in text:
        if ch == t:
           n += 1
    return n   

# Test
print count("coordination", "o")
------

==== Multiple return values

Write a function that returns the smallest and largest element in a
list.

------
def min_max(numbers):
    smallest = largest = numbers[0]
    for item in numbers:
        if item > largest:
            largest = item
        elif item < smallest:
            smallest = item
    return smallest, largest

# Test
smallest, largest = min_max([1, 2, 7, 6, 3, 1, 2, 8, 4])
------

==== Default argument values

Modify the function in Task 13, such that the caller can specify
whether case should be ignored. The default is to ignore case.

------
def count(text, ch, ignore_case=True):
    if ignore_case:
        text = text.lower() 
        ch = ch.lower()
    
    n = 0
    for t in text:
        if ch == t:
           n += 1
    return n   

# Test
print count("coordinatiOn", "O", False)
print count("coordination", "O", True)
print count("coordination", "O")
------
