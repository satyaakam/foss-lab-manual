== Compiling From Source ==
--
Most open source projects uses a build-system to compile their source files. Here is the
list of popular build-systems.

    * GNU Build System (Used by Kernel.org, freedesktop.org, X.org, Gnome etc.,)
    * Cmake (used by most of the projects in KDE environment and by KDE itself)
    * Ant (popular build system for Java)
    * SCons (used by Blender project)
    * Ninja (incremental build system for chromium project by google)
--

== GNU Build System ==

GNU Compiler Collection ('gcc')::
    * A compiler to generate machine executable binary files from source files.
    * Supports following languages
        ** C
	** C++
	** Objective-C
	** Fortran
	** Java
	** Ada
	** Go
    * more info: http://gcc.gnu.org/onlinedocs/gcc/

GNU make ('make')::
    * A program which executes predefined commands based on rules.
    * A rule is considered to be satisfied if all of its dependencies are satisfied.
    * GNU 'make' will process Rules, Dependencies and Commands from 'Makefile' or 'makefile'
    * more info: http://www.gnu.org/software/make/manual/html_node/index.html

GNU automake ('aclocal', 'automake')::
    * 'automake' is a tool to generate 'Makefile.in' by processing instructions from 'Makefile.am'.
    * 'configure' script will generate 'Makefile' by replacing dynamic variables in 'Makefile.in'
    * The final 'Makefile' contains well organized Rules for 'make' command to compile source codes.
    * 'aclocal' is a tool to copy 'm4' macros from systemwide directory to project directory.
    * 'automake' uses these 'm4' macros to process instructions from 'Makefile.am'
    * more info: http://www.gnu.org/software/automake/manual/html_node/index.html

GNU autoconf ('autoscan', 'autoheader', 'autoconf', 'autoreconf')::
    * 'autoconf' will generate 'configure' script by processing instructions from 'configure.ac'.
    * 'configure' replaces values for dynamic variables in various '.in' files and generates corresponding output files.
    * 'autoscan' will generate 'configure.scan' by scanning source and header files.
    * Developer will modify 'configure.scan' and rename it to 'configure.ac'.
    * 'autoheader' will generate 'config.h.in' file by scanning C macro definitions from source and header files.
    * 'autoreconf' command is used for executing autotools commands in proper order.
    * more info: http://www.gnu.org/software/autoconf/manual/html_node/index.html

GNU libtool (libtoolize)::
    * 'libtool' is a program used to generate static or dynamic libraries based on system capability.
    * It will only generate static library if the host is not capable of handling dynamic libraries.
    * 'libtoolize' synchronizes 'libtool' with autoconf/automake.
    * more info: http://www.gnu.org/software/libtool/manual/html_node/index.html

GNU gettext (gettextize)::
    * 'gettext' is a collection of utilities for translating string outputs in source codes to various languages.
    * 'gettextize' tool synchronizes 'gettext' utilities with autoconf/automake.
    * more info: http://www.gnu.org/software/gettext/manual/html_node/index.html

Installing GNU Build system::
--
    * Installing in RedHat (may work in Fedora, CenOS, SuSE etc.,)
----------------------------------------------
        # yum groupinstall 'Development Tools'
----------------------------------------------
    * Installing in Debian (may work in Ubuntu, Mint, Knoppix etc.,)
-----------------------------------------
        # apt-get install build-essential
-----------------------------------------
--

Steps to compile autotools compatible Project::
--
    * Example for download, untar and compile
------------------------------------------------------------------
        $ wget http://www.tcpdump.org/release/libpcap-1.1.1.tar.gz
	$ tar -xvzf libpcap-1.1.1.tar.gz
	$ cd libpcap-1.1.1
	$ ./configure
	$ make all
	# make install
------------------------------------------------------------------
    * Example for checkout and compile
-------------------------------------------------
        $ git clone git://bpf.tcpdump.org/libpcap
	$ cd libpcap
	$ ./configure
	$ make all
	# make install
-------------------------------------------------
NOTE: After extraction or checkout, you may not see 'configure' script, but
you may find 'autogen.sh'. Executing 'autogen.sh' will automatically run
autotools commands in proper order to generate 'configure' script
--

Steps to create autotools compatible C Project::
--
    * create project directory and switch to that directory
--------------------------
        $ mkdir helloworld
	$ cd helloworld
--------------------------
    * create 'helloworld.h'
-----------------------------------
        #ifndef __HELLOWORLD__
	#define __HELLOWORLD__
	
	#define GNU_SOURCE
	#include <stdio.h>
	#include <stdlib.h>
	
	#endif /* __HELLOWORLD__ */
-----------------------------------
    * create 'helloworld.c'
---------------------------------------------
        #include <helloworld.h>
	
	int main(int argc, char *argv[])
	{
	    fprintf(stdout, "hello world\n");
	    return(0);
	}
---------------------------------------------
    * create 'Makefile.am'
------------------------------------------------------
        AUTOMAKE_OPTIONS = foreign
	bin_PROGRAMS = helloworld
	helloworld_SOURCES = helloworld.c helloworld.h
	helloworld_CFLAGS = -Wall
------------------------------------------------------
    * scan source files with autoscan
----------------------------
        $ autoscan --verbose
----------------------------
    * modify 'configure.scan' file manually and rename it to 'configure.ac'
    * 'configure.scan'
------------------------------------------------------------------------
        #                                               -*- Autoconf -*-
        # Process this file with autoconf to produce a configure script
        
        AC_PREREQ([2.67])
        AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])
        AC_CONFIG_SRCDIR([helloworld.c])
        AC_CONFIG_HEADERS([config.h])
        
        # Checks for programs.
        AC_PROG_CC
        
        # Checks for libraries.
        n
        # Checks for header files.
        AC_CHECK_HEADERS([stdlib.h])
        
        # Checks for typedefs, structures, and compiler characteristics.
        
        # Checks for library functions.
        
        AC_CONFIG_FILES([Makefile])
        AC_OUTPUT
------------------------------------------------------------------------
    * 'configure.ac'
------------------------------------------------------------------------
        #                                               -*- Autoconf -*-
        # Process this file with autoconf to produce a configure script.
        
        AC_INIT([helloworld], [0.1], [ilugc@ae.iitm.ac.in])
	AM_INIT_AUTOMAKE
        AC_CONFIG_SRCDIR([helloworld.c])
        AC_CONFIG_HEADERS([config.h])
        
        # Checks for programs.
        AC_PROG_CC
        
        # Checks for libraries.
        
        # Checks for header files.
        AC_CHECK_HEADERS([stdlib.h])
        
        # Checks for typedefs, structures, and compiler characteristics.
        
        # Checks for library functions.
        
        AC_CONFIG_FILES([Makefile])
        AC_OUTPUT
------------------------------------------------------------------------
    * execute autotools commands manually (follow these steps if you want to mess with autotools)
-------------------------------------------------------
	$ aclocal
	$ autoconf --force 
	$ autoheader --force
	$ automake --copy --add-missing --force-missing
-------------------------------------------------------
    * execute autotools commands automatically (preferred way to use autotools)
--------------------------------------
        $ autoreconf --force --install
--------------------------------------
    * compile
---------------------
        $ ./configure
	$ make all
---------------------
    * execute
----------------------
        $ ./helloworld
----------------------
    * install
----------------------
	# make install
----------------------
    * uninstall
------------------------
        # make uninstall
------------------------
    * clean for recompiling (removing .o object files and temporary files)
--------------------
        $ make clean
--------------------
    * generate bz2 distribution tarball (helloworld-0.1.bz2)
-------------------------
        $ make dist-bzip2
-------------------------
--

Reference::
    * http://sources.redhat.com/autobook/ [AutoBook, by Gary V. Vaughan, Ben Elliston, Tom Tromey and Ian Lance Taylor]
    * http://www.seul.org/docs/autotut/ [autotut: Using GNU auto{conf,make,header}, by Felipe Bergo]
    * http://www.network-theory.co.uk/docs/gccintro/ [An Introduction to GCC, by Brian J. Gough]

== CMake ==
--
Python programs to build, test and package source files.

    * 'cmake' will generate host specific build files to compile sources
    * 'ctest' is used to test generated output executables
    * 'cpack' is used to pack generated executables into various formats
--

Installing CMake::
--
    * Installing in RedHat (may work in Fedora, CenOS, SuSE etc.,)
---------------------------
        # yum install cmake
---------------------------
    * Installing in Debian (may work in Ubuntu, Mint, Knoppix etc.,)
-------------------------------
        # apt-get install cmake
-------------------------------
--

Steps to compile CMake compatible Project::
--
    * Example for download, untar and compile
-------------------------
        $ wget FIXME
	$ tar -xvzf FIXME
	$ cd FIXME
	$ cmake .
	$ make all
	# make install
-------------------------
    * Example for checkout and compile
-------------------------
        $ git clone FIXME
	$ cd FIXME
	$ cmake .
	$ make all
	# make install
-------------------------
--

Steps to create CMake compatible C++ Project::
--
    * create project directory and switch to that directory
--------------------------
        $ mkdir helloworld
	$ cd helloworld
--------------------------
    * create 'helloworld.h'
-----------------------------------
        #ifndef __HELLOWORLD__
        #define __HELLOWORLD__
        
        #define GNU_SOURCE
        #include <iostream>
        
        class helloworld
        {
         public:
          void print(void);
        };
        
        #endif /* __HELLOWORLD__ */
-----------------------------------
    * create 'helloworld.cpp'
--------------------------------------------------
        #include <helloworld.h>
        
        void helloworld::print(void)
        {
          std::cout << "hello world" << std::endl;
        }
--------------------------------------------------
    * create 'main.cpp'
----------------------------------------
        #include <helloworld.h>
        
        int main(int argc, char *argv[])
        {
          helloworld hobject;
          hobject.print();
          return(0);
        }
----------------------------------------
    * create 'CMakeLists.txt'
--------------------------------------------------------------------------------
        project(helloworld)
        cmake_minimum_required(VERSION 2.8)
        include_directories(${helloworld_SOURCE_DIR})
        add_executable(helloworld main.cpp helloworld.cpp helloworld.h)
        set_target_properties(helloworld PROPERTIES COMPILE_FLAGS "-Wall -ggdb")
        install(PROGRAMS helloworld DESTINATION bin)
	include(CPack)
--------------------------------------------------------------------------------
    * compile
------------------
        $ cmake .
	$ make all
------------------
    * execute
----------------------
        $ ./helloworld
----------------------
    * install
----------------------
	# make install
----------------------
    * uninstall
        ** CMake will not provide 'uninstall' target by default.
        ** Check this link for more details http://www.cmake.org/Wiki/CMake_FAQ#Can_I_do_.22make_uninstall.22_with_CMake.3F
    * clean for recompiling (removing .o object files and temporary files)
--------------------
        $ make clean
--------------------
    * generate bz2 distribution tarball ('helloworld-0.1.1.bz2')
-----------------------
        $ cpack -G TBZ2
-----------------------
--

Reference::
    * http://www.cmake.org/cmake/help/documentation.html [CMake Documentation]
    * http://www.cmake.org/cmake/help/cmake_tutorial.html [CMake Tutorial]
    * http://techbase.kde.org/Development/Tutorials/CMake [CMake Tutorial from KDE]
